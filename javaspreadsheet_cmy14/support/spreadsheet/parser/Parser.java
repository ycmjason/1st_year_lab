/* Generated By:JavaCC: Do not edit this line. Parser.java */
package spreadsheet.parser;

import java.util.Set;
import java.util.Map;
import java.lang.Math;

public class Parser implements ParserConstants {

    public static final int BUILD_OK = 1;
    public static final int BUILD_ERROR = -1;

    // ////////////////////////////////////////////////////////////////////////
    // PARSER: tests if the string is an arithmetic expression or a Number
    // ////////////////////////////////////////////////////////////////////////
    final public boolean testNumerical() throws ParseException {
        if (jj_2_9(3)) {
            if (jj_2_1(3)) {
                jj_consume_token(NUM);
            } else if (jj_2_2(3)) {
                jj_consume_token(POSINFINITY);
            } else if (jj_2_3(3)) {
                jj_consume_token(NEGINFINITY);
            } else if (jj_2_4(3)) {
                jj_consume_token(NAN);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            if (jj_2_5(3)) {
                jj_consume_token(EOL);
            } else if (jj_2_6(3)) {
                jj_consume_token(0);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            {
                if (true)
                    return true;
            }
        } else if (jj_2_10(3)) {
            jj_consume_token(EQUALS);
            testExpression();
            if (jj_2_7(3)) {
                jj_consume_token(EOL);
            } else if (jj_2_8(3)) {
                jj_consume_token(0);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            {
                if (true)
                    return true;
            }
            {
                if (true)
                    return false;
            }
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public void testExpression() throws ParseException {
        testTerm();
        label_1: while (true) {
            if (jj_2_11(3)) {
                ;
            } else {
                break label_1;
            }
            if (jj_2_12(3)) {
                jj_consume_token(PLUS);
            } else if (jj_2_13(3)) {
                jj_consume_token(MINUS);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            testTerm();
        }
    }

    final public void testTerm() throws ParseException {
        testExp();
        label_2: while (true) {
            if (jj_2_14(3)) {
                ;
            } else {
                break label_2;
            }
            if (jj_2_15(3)) {
                jj_consume_token(MULTIPLY);
            } else if (jj_2_16(3)) {
                jj_consume_token(DIVIDE);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            testExp();
        }
    }

    final public void testExp() throws ParseException {
        testUnary();
        label_3: while (true) {
            if (jj_2_17(2147483647)) {
                ;
            } else {
                break label_3;
            }
            jj_consume_token(EXP);
            testExp();
        }
    }

    final public void testUnary() throws ParseException {
        if (jj_2_18(3)) {
            jj_consume_token(MINUS);
            testFactor();
        } else if (jj_2_19(3)) {
            testFactor();
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void testFactor() throws ParseException {
        if (jj_2_20(3)) {
            jj_consume_token(POSINFINITY);
        } else if (jj_2_21(3)) {
            jj_consume_token(NEGINFINITY);
        } else if (jj_2_22(3)) {
            jj_consume_token(NAN);
        } else if (jj_2_23(3)) {
            jj_consume_token(NUM);
        } else if (jj_2_24(3)) {
            jj_consume_token(ID);
        } else if (jj_2_25(3)) {
            jj_consume_token(L_BRACKET);
            testExpression();
            jj_consume_token(R_BRACKET);
        } else if (jj_2_26(3)) {
            jj_consume_token(LN);
            jj_consume_token(L_BRACKET);
            testExpression();
            jj_consume_token(R_BRACKET);
        } else if (jj_2_27(3)) {
            jj_consume_token(SIN);
            jj_consume_token(L_BRACKET);
            testExpression();
            jj_consume_token(R_BRACKET);
        } else if (jj_2_28(3)) {
            jj_consume_token(COS);
            jj_consume_token(L_BRACKET);
            testExpression();
            jj_consume_token(R_BRACKET);
        } else if (jj_2_29(3)) {
            jj_consume_token(TAN);
            jj_consume_token(L_BRACKET);
            testExpression();
            jj_consume_token(R_BRACKET);
        } else if (jj_2_30(3)) {
            jj_consume_token(ASIN);
            jj_consume_token(L_BRACKET);
            testExpression();
            jj_consume_token(R_BRACKET);
        } else if (jj_2_31(3)) {
            jj_consume_token(ATAN);
            jj_consume_token(L_BRACKET);
            testExpression();
            jj_consume_token(R_BRACKET);
        } else if (jj_2_32(3)) {
            jj_consume_token(ACOS);
            jj_consume_token(L_BRACKET);
            testExpression();
            jj_consume_token(R_BRACKET);
        } else if (jj_2_33(3)) {
            jj_consume_token(FLOOR);
            jj_consume_token(L_BRACKET);
            testExpression();
            jj_consume_token(R_BRACKET);
        } else if (jj_2_34(3)) {
            jj_consume_token(CEIL);
            jj_consume_token(L_BRACKET);
            testExpression();
            jj_consume_token(R_BRACKET);
        } else if (jj_2_35(3)) {
            jj_consume_token(MAX);
            jj_consume_token(L_BRACKET);
            testExpression();
            jj_consume_token(COMMA);
            testExpression();
            jj_consume_token(R_BRACKET);
        } else if (jj_2_36(3)) {
            jj_consume_token(MIN);
            jj_consume_token(L_BRACKET);
            testExpression();
            jj_consume_token(COMMA);
            testExpression();
            jj_consume_token(R_BRACKET);
        } else if (jj_2_37(3)) {
            jj_consume_token(IF);
            jj_consume_token(L_BRACKET);
            testBoolean();
            jj_consume_token(COMMA);
            testExpression();
            jj_consume_token(COMMA);
            testExpression();
            jj_consume_token(R_BRACKET);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void testBoolean() throws ParseException {
        testAnd();
        label_4: while (true) {
            if (jj_2_38(3)) {
                ;
            } else {
                break label_4;
            }
            jj_consume_token(OR);
            testAnd();
        }
    }

    final public void testAnd() throws ParseException {
        testNot();
        label_5: while (true) {
            if (jj_2_39(3)) {
                ;
            } else {
                break label_5;
            }
            jj_consume_token(AND);
            testNot();
        }
    }

    final public void testNot() throws ParseException {
        if (jj_2_40(3)) {
            testComparison();
        } else if (jj_2_41(3)) {
            jj_consume_token(NOT);
            testComparison();
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void testComparison() throws ParseException {
        if (jj_2_48(3)) {
            testExpression();
            if (jj_2_42(3)) {
                jj_consume_token(LT);
            } else if (jj_2_43(3)) {
                jj_consume_token(GT);
            } else if (jj_2_44(3)) {
                jj_consume_token(LTE);
            } else if (jj_2_45(3)) {
                jj_consume_token(GTE);
            } else if (jj_2_46(3)) {
                jj_consume_token(EQ);
            } else if (jj_2_47(3)) {
                jj_consume_token(NEQ);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            testExpression();
        } else if (jj_2_49(3)) {
            jj_consume_token(L_BRACKET);
            testBoolean();
            jj_consume_token(R_BRACKET);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    // ////////////////////////////////////////////////////////////////////////
    // PARSER: tests if the string is a valid location
    // ////////////////////////////////////////////////////////////////////////
    final public boolean testLocation() throws ParseException {
        jj_consume_token(ID);
        if (jj_2_50(3)) {
            jj_consume_token(EOL);
        } else if (jj_2_51(3)) {
            jj_consume_token(0);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if (true)
                return true;
        }
        {
            if (true)
                return false;
        }
        throw new Error("Missing return statement in function");
    }

    // ////////////////////////////////////////////////////////////////////////
    // PARSER: build the set of cell-references used in the formula
    // ////////////////////////////////////////////////////////////////////////
    final public int build(Set<String> vals) throws ParseException {
        if (jj_2_54(3)) {
            jj_consume_token(EQUALS);
            buildExpression(vals);
            if (jj_2_52(3)) {
                jj_consume_token(EOL);
            } else if (jj_2_53(3)) {
                jj_consume_token(0);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            {
                if (true)
                    return BUILD_OK;
            }
        } else if (jj_2_55(3)) {
            jj_consume_token(EOL);
        } else if (jj_2_56(3)) {
            jj_consume_token(0);
            {
                if (true)
                    return BUILD_ERROR;
            }
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public void buildExpression(Set<String> vals) throws ParseException {
        buildTerm(vals);
        label_6: while (true) {
            if (jj_2_57(3)) {
                ;
            } else {
                break label_6;
            }
            if (jj_2_58(3)) {
                jj_consume_token(PLUS);
            } else if (jj_2_59(3)) {
                jj_consume_token(MINUS);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            buildTerm(vals);
        }
    }

    final public void buildTerm(Set<String> vals) throws ParseException {
        buildExp(vals);
        label_7: while (true) {
            if (jj_2_60(3)) {
                ;
            } else {
                break label_7;
            }
            if (jj_2_61(3)) {
                jj_consume_token(MULTIPLY);
            } else if (jj_2_62(3)) {
                jj_consume_token(DIVIDE);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            buildExp(vals);
        }
    }

    final public void buildExp(Set<String> vals) throws ParseException {
        buildUnary(vals);
        label_8: while (true) {
            if (jj_2_63(2147483647)) {
                ;
            } else {
                break label_8;
            }
            jj_consume_token(EXP);
            buildExp(vals);
        }
    }

    final public void buildUnary(Set<String> vals) throws ParseException {
        if (jj_2_64(3)) {
            jj_consume_token(MINUS);
            buildFactor(vals);
        } else if (jj_2_65(3)) {
            buildFactor(vals);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void buildFactor(Set<String> vals) throws ParseException {
        Token t;
        if (jj_2_66(3)) {
            jj_consume_token(POSINFINITY);
        } else if (jj_2_67(3)) {
            jj_consume_token(NEGINFINITY);
        } else if (jj_2_68(3)) {
            jj_consume_token(NAN);
        } else if (jj_2_69(3)) {
            jj_consume_token(NUM);
        } else if (jj_2_70(3)) {
            t = jj_consume_token(ID);
            vals.add(t.image);
        } else if (jj_2_71(3)) {
            jj_consume_token(L_BRACKET);
            buildExpression(vals);
            jj_consume_token(R_BRACKET);
        } else if (jj_2_72(3)) {
            jj_consume_token(LN);
            jj_consume_token(L_BRACKET);
            buildExpression(vals);
            jj_consume_token(R_BRACKET);
        } else if (jj_2_73(3)) {
            jj_consume_token(SIN);
            jj_consume_token(L_BRACKET);
            buildExpression(vals);
            jj_consume_token(R_BRACKET);
        } else if (jj_2_74(3)) {
            jj_consume_token(COS);
            jj_consume_token(L_BRACKET);
            buildExpression(vals);
            jj_consume_token(R_BRACKET);
        } else if (jj_2_75(3)) {
            jj_consume_token(TAN);
            jj_consume_token(L_BRACKET);
            buildExpression(vals);
            jj_consume_token(R_BRACKET);
        } else if (jj_2_76(3)) {
            jj_consume_token(ASIN);
            jj_consume_token(L_BRACKET);
            buildExpression(vals);
            jj_consume_token(R_BRACKET);
        } else if (jj_2_77(3)) {
            jj_consume_token(ATAN);
            jj_consume_token(L_BRACKET);
            buildExpression(vals);
            jj_consume_token(R_BRACKET);
        } else if (jj_2_78(3)) {
            jj_consume_token(ACOS);
            jj_consume_token(L_BRACKET);
            buildExpression(vals);
            jj_consume_token(R_BRACKET);
        } else if (jj_2_79(3)) {
            jj_consume_token(FLOOR);
            jj_consume_token(L_BRACKET);
            buildExpression(vals);
            jj_consume_token(R_BRACKET);
        } else if (jj_2_80(3)) {
            jj_consume_token(CEIL);
            jj_consume_token(L_BRACKET);
            buildExpression(vals);
            jj_consume_token(R_BRACKET);
        } else if (jj_2_81(3)) {
            jj_consume_token(MAX);
            jj_consume_token(L_BRACKET);
            buildExpression(vals);
            jj_consume_token(COMMA);
            buildExpression(vals);
            jj_consume_token(R_BRACKET);
        } else if (jj_2_82(3)) {
            jj_consume_token(MIN);
            jj_consume_token(L_BRACKET);
            buildExpression(vals);
            jj_consume_token(COMMA);
            buildExpression(vals);
            jj_consume_token(R_BRACKET);
        } else if (jj_2_83(3)) {
            jj_consume_token(IF);
            jj_consume_token(L_BRACKET);
            buildBoolean(vals);
            jj_consume_token(COMMA);
            buildExpression(vals);
            jj_consume_token(COMMA);
            buildExpression(vals);
            jj_consume_token(R_BRACKET);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void buildBoolean(Set<String> vals) throws ParseException {
        buildAnd(vals);
        label_9: while (true) {
            if (jj_2_84(3)) {
                ;
            } else {
                break label_9;
            }
            jj_consume_token(OR);
            buildAnd(vals);
        }
    }

    final public void buildAnd(Set<String> vals) throws ParseException {
        buildNot(vals);
        label_10: while (true) {
            if (jj_2_85(3)) {
                ;
            } else {
                break label_10;
            }
            jj_consume_token(AND);
            buildNot(vals);
        }
    }

    final public void buildNot(Set<String> vals) throws ParseException {
        if (jj_2_86(3)) {
            jj_consume_token(NOT);
            buildComparison(vals);
        } else if (jj_2_87(3)) {
            buildComparison(vals);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void buildComparison(Set<String> vals) throws ParseException {
        if (jj_2_94(3)) {
            buildExpression(vals);
            if (jj_2_88(3)) {
                jj_consume_token(LT);
            } else if (jj_2_89(3)) {
                jj_consume_token(GT);
            } else if (jj_2_90(3)) {
                jj_consume_token(LTE);
            } else if (jj_2_91(3)) {
                jj_consume_token(GTE);
            } else if (jj_2_92(3)) {
                jj_consume_token(EQ);
            } else if (jj_2_93(3)) {
                jj_consume_token(NEQ);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            buildExpression(vals);
        } else if (jj_2_95(3)) {
            jj_consume_token(L_BRACKET);
            buildBoolean(vals);
            jj_consume_token(R_BRACKET);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    // ////////////////////////////////////////////////////////////////////////
    // PARSER: compute the value for the formula
    // ////////////////////////////////////////////////////////////////////////
    final public double compute(Map<String, Double> vals)
            throws ParseException, MissingValueException {
        Token t;
        double f;
        if (jj_2_104(3)) {
            jj_consume_token(EQUALS);
            f = computeExpression(vals);
            if (jj_2_96(3)) {
                jj_consume_token(EOL);
            } else if (jj_2_97(3)) {
                jj_consume_token(0);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            {
                if (true)
                    return f;
            }
        } else if (jj_2_105(3)) {
            if (jj_2_98(3)) {
                t = jj_consume_token(NUM);
            } else if (jj_2_99(3)) {
                t = jj_consume_token(POSINFINITY);
            } else if (jj_2_100(3)) {
                t = jj_consume_token(NEGINFINITY);
            } else if (jj_2_101(3)) {
                t = jj_consume_token(NAN);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            if (jj_2_102(3)) {
                jj_consume_token(EOL);
            } else if (jj_2_103(3)) {
                jj_consume_token(0);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            {
                if (true)
                    return Double.valueOf(t.image);
            }
            {
                if (true)
                    throw new ParseException("Invalid Formula.");
            }
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public double computeExpression(Map<String, Double> vals)
            throws ParseException, MissingValueException {
        double value, tmp;
        value = computeTerm(vals);
        label_11: while (true) {
            if (jj_2_106(3)) {
                ;
            } else {
                break label_11;
            }
            if (jj_2_107(3)) {
                jj_consume_token(PLUS);
                tmp = computeTerm(vals);
                value += tmp;
            } else if (jj_2_108(3)) {
                jj_consume_token(MINUS);
                tmp = computeTerm(vals);
                value -= tmp;
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true)
                return value;
        }
        throw new Error("Missing return statement in function");
    }

    final public double computeTerm(Map<String, Double> vals)
            throws ParseException, MissingValueException {
        double c1, c2;
        double value, tmp;
        value = computeExp(vals);
        label_12: while (true) {
            if (jj_2_109(3)) {
                ;
            } else {
                break label_12;
            }
            if (jj_2_110(3)) {
                jj_consume_token(MULTIPLY);
                tmp = computeExp(vals);
                value *= tmp;
            } else if (jj_2_111(3)) {
                jj_consume_token(DIVIDE);
                tmp = computeExp(vals);
                value /= tmp;
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true)
                return value;
        }
        throw new Error("Missing return statement in function");
    }

    final public double computeExp(Map<String, Double> vals)
            throws ParseException, MissingValueException {
        double value, tmp;
        value = computeUnary(vals);
        label_13: while (true) {
            if (jj_2_112(2147483647)) {
                ;
            } else {
                break label_13;
            }
            jj_consume_token(EXP);
            tmp = computeExp(vals);
            value = Double.valueOf(Math.pow(value, tmp)).doubleValue();
        }
        {
            if (true)
                return value;
        }
        throw new Error("Missing return statement in function");
    }

    final public double computeUnary(Map<String, Double> vals)
            throws ParseException, MissingValueException {
        double value;
        if (jj_2_113(3)) {
            jj_consume_token(MINUS);
            value = computeFactor(vals);
            {
                if (true)
                    return -value;
            }
        } else if (jj_2_114(3)) {
            value = computeFactor(vals);
            {
                if (true)
                    return value;
            }
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public double computeFactor(Map<String, Double> vals)
            throws ParseException, MissingValueException {
        Token t = null;
        double s, s0;
        boolean b;
        if (jj_2_115(3)) {
            jj_consume_token(POSINFINITY);
            {
                if (true)
                    return Double.POSITIVE_INFINITY;
            }
        } else if (jj_2_116(3)) {
            jj_consume_token(NEGINFINITY);
            {
                if (true)
                    return Double.NEGATIVE_INFINITY;
            }
        } else if (jj_2_117(3)) {
            jj_consume_token(NAN);
            {
                if (true)
                    return Double.NaN;
            }
        } else if (jj_2_118(3)) {
            t = jj_consume_token(ID);
            if (vals.containsKey(t.image)) {
                {
                    if (true)
                        return vals.get(t.image);
                }
            }

            {
                if (true)
                    throw new MissingValueException(
                            "Missing value for cell located at: " + t.image);
            }
        } else if (jj_2_119(3)) {
            t = jj_consume_token(NUM);
            {
                if (true)
                    return Double.valueOf(t.image);
            }
        } else if (jj_2_120(3)) {
            jj_consume_token(L_BRACKET);
            s = computeExpression(vals);
            jj_consume_token(R_BRACKET);
            {
                if (true)
                    return s;
            }
        } else if (jj_2_121(3)) {
            jj_consume_token(LN);
            jj_consume_token(L_BRACKET);
            s = computeExpression(vals);
            jj_consume_token(R_BRACKET);
            {
                if (true)
                    return Math.log(s);
            }
        } else if (jj_2_122(3)) {
            jj_consume_token(SIN);
            jj_consume_token(L_BRACKET);
            s = computeExpression(vals);
            jj_consume_token(R_BRACKET);
            {
                if (true)
                    return Math.sin(s);
            }
        } else if (jj_2_123(3)) {
            jj_consume_token(COS);
            jj_consume_token(L_BRACKET);
            s = computeExpression(vals);
            jj_consume_token(R_BRACKET);
            {
                if (true)
                    return Math.cos(s);
            }
        } else if (jj_2_124(3)) {
            jj_consume_token(TAN);
            jj_consume_token(L_BRACKET);
            s = computeExpression(vals);
            jj_consume_token(R_BRACKET);
            {
                if (true)
                    return Math.tan(s);
            }
        } else if (jj_2_125(3)) {
            jj_consume_token(ASIN);
            jj_consume_token(L_BRACKET);
            s = computeExpression(vals);
            jj_consume_token(R_BRACKET);
            {
                if (true)
                    return Math.asin(s);
            }
        } else if (jj_2_126(3)) {
            jj_consume_token(ATAN);
            jj_consume_token(L_BRACKET);
            s = computeExpression(vals);
            jj_consume_token(R_BRACKET);
            {
                if (true)
                    return Math.atan(s);
            }
        } else if (jj_2_127(3)) {
            jj_consume_token(ACOS);
            jj_consume_token(L_BRACKET);
            s = computeExpression(vals);
            jj_consume_token(R_BRACKET);
            {
                if (true)
                    return Math.acos(s);
            }
        } else if (jj_2_128(3)) {
            jj_consume_token(FLOOR);
            jj_consume_token(L_BRACKET);
            s = computeExpression(vals);
            jj_consume_token(R_BRACKET);
            {
                if (true)
                    return Math.floor(s);
            }
        } else if (jj_2_129(3)) {
            jj_consume_token(CEIL);
            jj_consume_token(L_BRACKET);
            s = computeExpression(vals);
            jj_consume_token(R_BRACKET);
            {
                if (true)
                    return Math.ceil(s);
            }
        } else if (jj_2_130(3)) {
            jj_consume_token(MAX);
            jj_consume_token(L_BRACKET);
            s = computeExpression(vals);
            jj_consume_token(COMMA);
            s0 = computeExpression(vals);
            jj_consume_token(R_BRACKET);
            {
                if (true)
                    return Math.max(s, s0);
            }
        } else if (jj_2_131(3)) {
            jj_consume_token(MIN);
            jj_consume_token(L_BRACKET);
            s = computeExpression(vals);
            jj_consume_token(COMMA);
            s0 = computeExpression(vals);
            jj_consume_token(R_BRACKET);
            {
                if (true)
                    return Math.min(s, s0);
            }
        } else if (jj_2_132(3)) {
            jj_consume_token(IF);
            jj_consume_token(L_BRACKET);
            b = computeBoolean(vals);
            jj_consume_token(COMMA);
            s = computeExpression(vals);
            jj_consume_token(COMMA);
            s0 = computeExpression(vals);
            jj_consume_token(R_BRACKET);
            {
                if (true)
                    return (b) ? s : s0;
            }
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public boolean computeBoolean(Map<String, Double> vals)
            throws ParseException, MissingValueException {
        boolean b, b0;
        b = computeAnd(vals);
        label_14: while (true) {
            if (jj_2_133(3)) {
                ;
            } else {
                break label_14;
            }
            jj_consume_token(OR);
            b0 = computeAnd(vals);
            b = b || b0;
        }
        {
            if (true)
                return b;
        }
        throw new Error("Missing return statement in function");
    }

    final public boolean computeAnd(Map<String, Double> vals)
            throws ParseException, MissingValueException {
        boolean b, b0;
        b = computeNot(vals);
        label_15: while (true) {
            if (jj_2_134(3)) {
                ;
            } else {
                break label_15;
            }
            jj_consume_token(AND);
            b0 = computeNot(vals);
            b = b && b0;
        }
        {
            if (true)
                return b;
        }
        throw new Error("Missing return statement in function");
    }

    final public boolean computeNot(Map<String, Double> vals)
            throws ParseException, MissingValueException {
        boolean b;
        if (jj_2_135(3)) {
            b = computeComparison(vals);
            {
                if (true)
                    return b;
            }
        } else if (jj_2_136(3)) {
            jj_consume_token(NOT);
            b = computeComparison(vals);
            {
                if (true)
                    return !b;
            }
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public boolean computeComparison(Map<String, Double> vals)
            throws ParseException, MissingValueException {
        boolean b = false;
        double s, s0;
        if (jj_2_143(3)) {
            s = computeExpression(vals);
            if (jj_2_137(3)) {
                jj_consume_token(LT);
                s0 = computeExpression(vals);
                {
                    if (true)
                        return s < s0;
                }
            } else if (jj_2_138(3)) {
                jj_consume_token(GT);
                s0 = computeExpression(vals);
                {
                    if (true)
                        return s > s0;
                }
            } else if (jj_2_139(3)) {
                jj_consume_token(LTE);
                s0 = computeExpression(vals);
                {
                    if (true)
                        return s <= s0;
                }
            } else if (jj_2_140(3)) {
                jj_consume_token(GTE);
                s0 = computeExpression(vals);
                {
                    if (true)
                        return s >= s0;
                }
            } else if (jj_2_141(3)) {
                jj_consume_token(EQ);
                s0 = computeExpression(vals);
                {
                    if (true)
                        return s == s0;
                }
            } else if (jj_2_142(3)) {
                jj_consume_token(NEQ);
                s0 = computeExpression(vals);
                {
                    if (true)
                        return s != s0;
                }
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } else if (jj_2_144(3)) {
            jj_consume_token(L_BRACKET);
            b = computeBoolean(vals);
            jj_consume_token(R_BRACKET);
            {
                if (true)
                    return b;
            }
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    final private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    final private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    final private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    final private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    final private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    final private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    final private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    final private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    final private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    final private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_11();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    final private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_12();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    final private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_13();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    final private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_14();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    final private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_15();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    final private boolean jj_2_16(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_16();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(15, xla);
        }
    }

    final private boolean jj_2_17(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_17();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(16, xla);
        }
    }

    final private boolean jj_2_18(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_18();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(17, xla);
        }
    }

    final private boolean jj_2_19(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_19();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(18, xla);
        }
    }

    final private boolean jj_2_20(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_20();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(19, xla);
        }
    }

    final private boolean jj_2_21(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_21();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(20, xla);
        }
    }

    final private boolean jj_2_22(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_22();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(21, xla);
        }
    }

    final private boolean jj_2_23(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_23();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(22, xla);
        }
    }

    final private boolean jj_2_24(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_24();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(23, xla);
        }
    }

    final private boolean jj_2_25(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_25();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(24, xla);
        }
    }

    final private boolean jj_2_26(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_26();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(25, xla);
        }
    }

    final private boolean jj_2_27(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_27();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(26, xla);
        }
    }

    final private boolean jj_2_28(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_28();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(27, xla);
        }
    }

    final private boolean jj_2_29(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_29();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(28, xla);
        }
    }

    final private boolean jj_2_30(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_30();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(29, xla);
        }
    }

    final private boolean jj_2_31(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_31();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(30, xla);
        }
    }

    final private boolean jj_2_32(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_32();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(31, xla);
        }
    }

    final private boolean jj_2_33(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_33();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(32, xla);
        }
    }

    final private boolean jj_2_34(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_34();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(33, xla);
        }
    }

    final private boolean jj_2_35(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_35();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(34, xla);
        }
    }

    final private boolean jj_2_36(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_36();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(35, xla);
        }
    }

    final private boolean jj_2_37(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_37();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(36, xla);
        }
    }

    final private boolean jj_2_38(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_38();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(37, xla);
        }
    }

    final private boolean jj_2_39(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_39();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(38, xla);
        }
    }

    final private boolean jj_2_40(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_40();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(39, xla);
        }
    }

    final private boolean jj_2_41(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_41();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(40, xla);
        }
    }

    final private boolean jj_2_42(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_42();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(41, xla);
        }
    }

    final private boolean jj_2_43(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_43();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(42, xla);
        }
    }

    final private boolean jj_2_44(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_44();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(43, xla);
        }
    }

    final private boolean jj_2_45(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_45();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(44, xla);
        }
    }

    final private boolean jj_2_46(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_46();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(45, xla);
        }
    }

    final private boolean jj_2_47(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_47();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(46, xla);
        }
    }

    final private boolean jj_2_48(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_48();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(47, xla);
        }
    }

    final private boolean jj_2_49(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_49();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(48, xla);
        }
    }

    final private boolean jj_2_50(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_50();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(49, xla);
        }
    }

    final private boolean jj_2_51(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_51();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(50, xla);
        }
    }

    final private boolean jj_2_52(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_52();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(51, xla);
        }
    }

    final private boolean jj_2_53(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_53();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(52, xla);
        }
    }

    final private boolean jj_2_54(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_54();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(53, xla);
        }
    }

    final private boolean jj_2_55(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_55();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(54, xla);
        }
    }

    final private boolean jj_2_56(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_56();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(55, xla);
        }
    }

    final private boolean jj_2_57(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_57();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(56, xla);
        }
    }

    final private boolean jj_2_58(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_58();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(57, xla);
        }
    }

    final private boolean jj_2_59(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_59();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(58, xla);
        }
    }

    final private boolean jj_2_60(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_60();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(59, xla);
        }
    }

    final private boolean jj_2_61(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_61();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(60, xla);
        }
    }

    final private boolean jj_2_62(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_62();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(61, xla);
        }
    }

    final private boolean jj_2_63(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_63();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(62, xla);
        }
    }

    final private boolean jj_2_64(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_64();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(63, xla);
        }
    }

    final private boolean jj_2_65(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_65();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(64, xla);
        }
    }

    final private boolean jj_2_66(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_66();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(65, xla);
        }
    }

    final private boolean jj_2_67(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_67();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(66, xla);
        }
    }

    final private boolean jj_2_68(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_68();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(67, xla);
        }
    }

    final private boolean jj_2_69(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_69();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(68, xla);
        }
    }

    final private boolean jj_2_70(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_70();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(69, xla);
        }
    }

    final private boolean jj_2_71(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_71();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(70, xla);
        }
    }

    final private boolean jj_2_72(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_72();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(71, xla);
        }
    }

    final private boolean jj_2_73(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_73();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(72, xla);
        }
    }

    final private boolean jj_2_74(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_74();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(73, xla);
        }
    }

    final private boolean jj_2_75(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_75();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(74, xla);
        }
    }

    final private boolean jj_2_76(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_76();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(75, xla);
        }
    }

    final private boolean jj_2_77(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_77();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(76, xla);
        }
    }

    final private boolean jj_2_78(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_78();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(77, xla);
        }
    }

    final private boolean jj_2_79(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_79();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(78, xla);
        }
    }

    final private boolean jj_2_80(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_80();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(79, xla);
        }
    }

    final private boolean jj_2_81(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_81();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(80, xla);
        }
    }

    final private boolean jj_2_82(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_82();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(81, xla);
        }
    }

    final private boolean jj_2_83(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_83();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(82, xla);
        }
    }

    final private boolean jj_2_84(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_84();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(83, xla);
        }
    }

    final private boolean jj_2_85(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_85();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(84, xla);
        }
    }

    final private boolean jj_2_86(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_86();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(85, xla);
        }
    }

    final private boolean jj_2_87(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_87();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(86, xla);
        }
    }

    final private boolean jj_2_88(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_88();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(87, xla);
        }
    }

    final private boolean jj_2_89(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_89();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(88, xla);
        }
    }

    final private boolean jj_2_90(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_90();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(89, xla);
        }
    }

    final private boolean jj_2_91(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_91();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(90, xla);
        }
    }

    final private boolean jj_2_92(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_92();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(91, xla);
        }
    }

    final private boolean jj_2_93(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_93();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(92, xla);
        }
    }

    final private boolean jj_2_94(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_94();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(93, xla);
        }
    }

    final private boolean jj_2_95(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_95();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(94, xla);
        }
    }

    final private boolean jj_2_96(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_96();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(95, xla);
        }
    }

    final private boolean jj_2_97(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_97();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(96, xla);
        }
    }

    final private boolean jj_2_98(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_98();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(97, xla);
        }
    }

    final private boolean jj_2_99(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_99();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(98, xla);
        }
    }

    final private boolean jj_2_100(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_100();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(99, xla);
        }
    }

    final private boolean jj_2_101(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_101();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(100, xla);
        }
    }

    final private boolean jj_2_102(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_102();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(101, xla);
        }
    }

    final private boolean jj_2_103(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_103();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(102, xla);
        }
    }

    final private boolean jj_2_104(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_104();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(103, xla);
        }
    }

    final private boolean jj_2_105(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_105();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(104, xla);
        }
    }

    final private boolean jj_2_106(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_106();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(105, xla);
        }
    }

    final private boolean jj_2_107(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_107();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(106, xla);
        }
    }

    final private boolean jj_2_108(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_108();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(107, xla);
        }
    }

    final private boolean jj_2_109(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_109();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(108, xla);
        }
    }

    final private boolean jj_2_110(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_110();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(109, xla);
        }
    }

    final private boolean jj_2_111(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_111();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(110, xla);
        }
    }

    final private boolean jj_2_112(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_112();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(111, xla);
        }
    }

    final private boolean jj_2_113(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_113();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(112, xla);
        }
    }

    final private boolean jj_2_114(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_114();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(113, xla);
        }
    }

    final private boolean jj_2_115(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_115();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(114, xla);
        }
    }

    final private boolean jj_2_116(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_116();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(115, xla);
        }
    }

    final private boolean jj_2_117(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_117();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(116, xla);
        }
    }

    final private boolean jj_2_118(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_118();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(117, xla);
        }
    }

    final private boolean jj_2_119(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_119();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(118, xla);
        }
    }

    final private boolean jj_2_120(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_120();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(119, xla);
        }
    }

    final private boolean jj_2_121(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_121();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(120, xla);
        }
    }

    final private boolean jj_2_122(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_122();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(121, xla);
        }
    }

    final private boolean jj_2_123(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_123();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(122, xla);
        }
    }

    final private boolean jj_2_124(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_124();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(123, xla);
        }
    }

    final private boolean jj_2_125(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_125();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(124, xla);
        }
    }

    final private boolean jj_2_126(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_126();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(125, xla);
        }
    }

    final private boolean jj_2_127(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_127();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(126, xla);
        }
    }

    final private boolean jj_2_128(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_128();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(127, xla);
        }
    }

    final private boolean jj_2_129(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_129();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(128, xla);
        }
    }

    final private boolean jj_2_130(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_130();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(129, xla);
        }
    }

    final private boolean jj_2_131(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_131();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(130, xla);
        }
    }

    final private boolean jj_2_132(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_132();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(131, xla);
        }
    }

    final private boolean jj_2_133(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_133();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(132, xla);
        }
    }

    final private boolean jj_2_134(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_134();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(133, xla);
        }
    }

    final private boolean jj_2_135(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_135();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(134, xla);
        }
    }

    final private boolean jj_2_136(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_136();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(135, xla);
        }
    }

    final private boolean jj_2_137(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_137();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(136, xla);
        }
    }

    final private boolean jj_2_138(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_138();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(137, xla);
        }
    }

    final private boolean jj_2_139(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_139();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(138, xla);
        }
    }

    final private boolean jj_2_140(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_140();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(139, xla);
        }
    }

    final private boolean jj_2_141(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_141();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(140, xla);
        }
    }

    final private boolean jj_2_142(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_142();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(141, xla);
        }
    }

    final private boolean jj_2_143(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_143();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(142, xla);
        }
    }

    final private boolean jj_2_144(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_144();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(143, xla);
        }
    }

    final private boolean jj_3_117() {
        if (jj_scan_token(NAN))
            return true;
        return false;
    }

    final private boolean jj_3_116() {
        if (jj_scan_token(NEGINFINITY))
            return true;
        return false;
    }

    final private boolean jj_3_103() {
        if (jj_scan_token(0))
            return true;
        return false;
    }

    final private boolean jj_3R_35() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_115()) {
            jj_scanpos = xsp;
            if (jj_3_116()) {
                jj_scanpos = xsp;
                if (jj_3_117()) {
                    jj_scanpos = xsp;
                    if (jj_3_118()) {
                        jj_scanpos = xsp;
                        if (jj_3_119()) {
                            jj_scanpos = xsp;
                            if (jj_3_120()) {
                                jj_scanpos = xsp;
                                if (jj_3_121()) {
                                    jj_scanpos = xsp;
                                    if (jj_3_122()) {
                                        jj_scanpos = xsp;
                                        if (jj_3_123()) {
                                            jj_scanpos = xsp;
                                            if (jj_3_124()) {
                                                jj_scanpos = xsp;
                                                if (jj_3_125()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3_126()) {
                                                        jj_scanpos = xsp;
                                                        if (jj_3_127()) {
                                                            jj_scanpos = xsp;
                                                            if (jj_3_128()) {
                                                                jj_scanpos = xsp;
                                                                if (jj_3_129()) {
                                                                    jj_scanpos = xsp;
                                                                    if (jj_3_130()) {
                                                                        jj_scanpos = xsp;
                                                                        if (jj_3_131()) {
                                                                            jj_scanpos = xsp;
                                                                            if (jj_3_132())
                                                                                return true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    final private boolean jj_3_115() {
        if (jj_scan_token(POSINFINITY))
            return true;
        return false;
    }

    final private boolean jj_3_102() {
        if (jj_scan_token(EOL))
            return true;
        return false;
    }

    final private boolean jj_3_112() {
        if (jj_scan_token(EXP))
            return true;
        return false;
    }

    final private boolean jj_3_114() {
        if (jj_3R_35())
            return true;
        return false;
    }

    final private boolean jj_3R_44() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_113()) {
            jj_scanpos = xsp;
            if (jj_3_114())
                return true;
        }
        return false;
    }

    final private boolean jj_3_113() {
        if (jj_scan_token(MINUS))
            return true;
        if (jj_3R_35())
            return true;
        return false;
    }

    final private boolean jj_3_101() {
        if (jj_scan_token(NAN))
            return true;
        return false;
    }

    final private boolean jj_3R_45() {
        if (jj_scan_token(EXP))
            return true;
        if (jj_3R_34())
            return true;
        return false;
    }

    final private boolean jj_3_97() {
        if (jj_scan_token(0))
            return true;
        return false;
    }

    final private boolean jj_3R_34() {
        if (jj_3R_44())
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_45()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    final private boolean jj_3_111() {
        if (jj_scan_token(DIVIDE))
            return true;
        if (jj_3R_34())
            return true;
        return false;
    }

    final private boolean jj_3_93() {
        if (jj_scan_token(NEQ))
            return true;
        return false;
    }

    final private boolean jj_3_110() {
        if (jj_scan_token(MULTIPLY))
            return true;
        if (jj_3R_34())
            return true;
        return false;
    }

    final private boolean jj_3_109() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_110()) {
            jj_scanpos = xsp;
            if (jj_3_111())
                return true;
        }
        return false;
    }

    final private boolean jj_3_96() {
        if (jj_scan_token(EOL))
            return true;
        return false;
    }

    final private boolean jj_3_92() {
        if (jj_scan_token(EQ))
            return true;
        return false;
    }

    final private boolean jj_3_108() {
        if (jj_scan_token(MINUS))
            return true;
        if (jj_3R_33())
            return true;
        return false;
    }

    final private boolean jj_3_100() {
        if (jj_scan_token(NEGINFINITY))
            return true;
        return false;
    }

    final private boolean jj_3_91() {
        if (jj_scan_token(GTE))
            return true;
        return false;
    }

    final private boolean jj_3R_33() {
        if (jj_3R_34())
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_109()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    final private boolean jj_3_107() {
        if (jj_scan_token(PLUS))
            return true;
        if (jj_3R_33())
            return true;
        return false;
    }

    final private boolean jj_3_90() {
        if (jj_scan_token(LTE))
            return true;
        return false;
    }

    final private boolean jj_3_106() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_107()) {
            jj_scanpos = xsp;
            if (jj_3_108())
                return true;
        }
        return false;
    }

    final private boolean jj_3_89() {
        if (jj_scan_token(GT))
            return true;
        return false;
    }

    final private boolean jj_3_87() {
        if (jj_3R_31())
            return true;
        return false;
    }

    final private boolean jj_3R_32() {
        if (jj_3R_33())
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_106()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    final private boolean jj_3_99() {
        if (jj_scan_token(POSINFINITY))
            return true;
        return false;
    }

    final private boolean jj_3_88() {
        if (jj_scan_token(LT))
            return true;
        return false;
    }

    final private boolean jj_3_98() {
        if (jj_scan_token(NUM))
            return true;
        return false;
    }

    final private boolean jj_3_105() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_98()) {
            jj_scanpos = xsp;
            if (jj_3_99()) {
                jj_scanpos = xsp;
                if (jj_3_100()) {
                    jj_scanpos = xsp;
                    if (jj_3_101())
                        return true;
                }
            }
        }
        xsp = jj_scanpos;
        if (jj_3_102()) {
            jj_scanpos = xsp;
            if (jj_3_103())
                return true;
        }
        return false;
    }

    final private boolean jj_3_104() {
        if (jj_scan_token(EQUALS))
            return true;
        if (jj_3R_32())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_96()) {
            jj_scanpos = xsp;
            if (jj_3_97())
                return true;
        }
        return false;
    }

    final private boolean jj_3_85() {
        if (jj_scan_token(AND))
            return true;
        if (jj_3R_30())
            return true;
        return false;
    }

    final private boolean jj_3_95() {
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_28())
            return true;
        return false;
    }

    final private boolean jj_3_70() {
        if (jj_scan_token(ID))
            return true;
        return false;
    }

    final private boolean jj_3R_31() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_94()) {
            jj_scanpos = xsp;
            if (jj_3_95())
                return true;
        }
        return false;
    }

    final private boolean jj_3_94() {
        if (jj_3R_24())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_88()) {
            jj_scanpos = xsp;
            if (jj_3_89()) {
                jj_scanpos = xsp;
                if (jj_3_90()) {
                    jj_scanpos = xsp;
                    if (jj_3_91()) {
                        jj_scanpos = xsp;
                        if (jj_3_92()) {
                            jj_scanpos = xsp;
                            if (jj_3_93())
                                return true;
                        }
                    }
                }
            }
        }
        if (jj_3R_24())
            return true;
        return false;
    }

    final private boolean jj_3_84() {
        if (jj_scan_token(OR))
            return true;
        if (jj_3R_29())
            return true;
        return false;
    }

    final private boolean jj_3R_30() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_86()) {
            jj_scanpos = xsp;
            if (jj_3_87())
                return true;
        }
        return false;
    }

    final private boolean jj_3_69() {
        if (jj_scan_token(NUM))
            return true;
        return false;
    }

    final private boolean jj_3_86() {
        if (jj_scan_token(NOT))
            return true;
        if (jj_3R_31())
            return true;
        return false;
    }

    final private boolean jj_3R_29() {
        if (jj_3R_30())
            return true;
        return false;
    }

    final private boolean jj_3_68() {
        if (jj_scan_token(NAN))
            return true;
        return false;
    }

    final private boolean jj_3R_28() {
        if (jj_3R_29())
            return true;
        return false;
    }

    final private boolean jj_3_65() {
        if (jj_3R_27())
            return true;
        return false;
    }

    final private boolean jj_3_63() {
        if (jj_scan_token(EXP))
            return true;
        return false;
    }

    final private boolean jj_3_62() {
        if (jj_scan_token(DIVIDE))
            return true;
        return false;
    }

    final private boolean jj_3_83() {
        if (jj_scan_token(IF))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_28())
            return true;
        return false;
    }

    final private boolean jj_3_82() {
        if (jj_scan_token(MIN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_24())
            return true;
        return false;
    }

    final private boolean jj_3_67() {
        if (jj_scan_token(NEGINFINITY))
            return true;
        return false;
    }

    final private boolean jj_3_81() {
        if (jj_scan_token(MAX))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_24())
            return true;
        return false;
    }

    final private boolean jj_3_80() {
        if (jj_scan_token(CEIL))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_24())
            return true;
        return false;
    }

    final private boolean jj_3_79() {
        if (jj_scan_token(FLOOR))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_24())
            return true;
        return false;
    }

    final private boolean jj_3R_43() {
        if (jj_scan_token(EXP))
            return true;
        if (jj_3R_26())
            return true;
        return false;
    }

    final private boolean jj_3_78() {
        if (jj_scan_token(ACOS))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_24())
            return true;
        return false;
    }

    final private boolean jj_3_77() {
        if (jj_scan_token(ATAN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_24())
            return true;
        return false;
    }

    final private boolean jj_3_76() {
        if (jj_scan_token(ASIN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_24())
            return true;
        return false;
    }

    final private boolean jj_3_59() {
        if (jj_scan_token(MINUS))
            return true;
        return false;
    }

    final private boolean jj_3_75() {
        if (jj_scan_token(TAN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_24())
            return true;
        return false;
    }

    final private boolean jj_3_74() {
        if (jj_scan_token(COS))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_24())
            return true;
        return false;
    }

    final private boolean jj_3_53() {
        if (jj_scan_token(0))
            return true;
        return false;
    }

    final private boolean jj_3_73() {
        if (jj_scan_token(SIN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_24())
            return true;
        return false;
    }

    final private boolean jj_3_72() {
        if (jj_scan_token(LN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_24())
            return true;
        return false;
    }

    final private boolean jj_3_61() {
        if (jj_scan_token(MULTIPLY))
            return true;
        return false;
    }

    final private boolean jj_3_71() {
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_24())
            return true;
        if (jj_scan_token(R_BRACKET))
            return true;
        return false;
    }

    final private boolean jj_3_60() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_61()) {
            jj_scanpos = xsp;
            if (jj_3_62())
                return true;
        }
        if (jj_3R_26())
            return true;
        return false;
    }

    final private boolean jj_3_58() {
        if (jj_scan_token(PLUS))
            return true;
        return false;
    }

    final private boolean jj_3R_42() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_64()) {
            jj_scanpos = xsp;
            if (jj_3_65())
                return true;
        }
        return false;
    }

    final private boolean jj_3R_27() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_66()) {
            jj_scanpos = xsp;
            if (jj_3_67()) {
                jj_scanpos = xsp;
                if (jj_3_68()) {
                    jj_scanpos = xsp;
                    if (jj_3_69()) {
                        jj_scanpos = xsp;
                        if (jj_3_70()) {
                            jj_scanpos = xsp;
                            if (jj_3_71()) {
                                jj_scanpos = xsp;
                                if (jj_3_72()) {
                                    jj_scanpos = xsp;
                                    if (jj_3_73()) {
                                        jj_scanpos = xsp;
                                        if (jj_3_74()) {
                                            jj_scanpos = xsp;
                                            if (jj_3_75()) {
                                                jj_scanpos = xsp;
                                                if (jj_3_76()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3_77()) {
                                                        jj_scanpos = xsp;
                                                        if (jj_3_78()) {
                                                            jj_scanpos = xsp;
                                                            if (jj_3_79()) {
                                                                jj_scanpos = xsp;
                                                                if (jj_3_80()) {
                                                                    jj_scanpos = xsp;
                                                                    if (jj_3_81()) {
                                                                        jj_scanpos = xsp;
                                                                        if (jj_3_82()) {
                                                                            jj_scanpos = xsp;
                                                                            if (jj_3_83())
                                                                                return true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    final private boolean jj_3_66() {
        if (jj_scan_token(POSINFINITY))
            return true;
        return false;
    }

    final private boolean jj_3_64() {
        if (jj_scan_token(MINUS))
            return true;
        if (jj_3R_27())
            return true;
        return false;
    }

    final private boolean jj_3_52() {
        if (jj_scan_token(EOL))
            return true;
        return false;
    }

    final private boolean jj_3_57() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_58()) {
            jj_scanpos = xsp;
            if (jj_3_59())
                return true;
        }
        if (jj_3R_25())
            return true;
        return false;
    }

    final private boolean jj_3_47() {
        if (jj_scan_token(NEQ))
            return true;
        return false;
    }

    final private boolean jj_3R_26() {
        if (jj_3R_42())
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_43()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    final private boolean jj_3_46() {
        if (jj_scan_token(EQ))
            return true;
        return false;
    }

    final private boolean jj_3R_25() {
        if (jj_3R_26())
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_60()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    final private boolean jj_3_45() {
        if (jj_scan_token(GTE))
            return true;
        return false;
    }

    final private boolean jj_3R_24() {
        if (jj_3R_25())
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_57()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    final private boolean jj_3_44() {
        if (jj_scan_token(LTE))
            return true;
        return false;
    }

    final private boolean jj_3_51() {
        if (jj_scan_token(0))
            return true;
        return false;
    }

    final private boolean jj_3_56() {
        if (jj_scan_token(0))
            return true;
        return false;
    }

    final private boolean jj_3_43() {
        if (jj_scan_token(GT))
            return true;
        return false;
    }

    final private boolean jj_3_42() {
        if (jj_scan_token(LT))
            return true;
        return false;
    }

    final private boolean jj_3_50() {
        if (jj_scan_token(EOL))
            return true;
        return false;
    }

    final private boolean jj_3_55() {
        if (jj_scan_token(EOL))
            return true;
        return false;
    }

    final private boolean jj_3_54() {
        if (jj_scan_token(EQUALS))
            return true;
        if (jj_3R_24())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_52()) {
            jj_scanpos = xsp;
            if (jj_3_53())
                return true;
        }
        return false;
    }

    final private boolean jj_3R_23() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_48()) {
            jj_scanpos = xsp;
            if (jj_3_49())
                return true;
        }
        return false;
    }

    final private boolean jj_3_48() {
        if (jj_3R_16())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_42()) {
            jj_scanpos = xsp;
            if (jj_3_43()) {
                jj_scanpos = xsp;
                if (jj_3_44()) {
                    jj_scanpos = xsp;
                    if (jj_3_45()) {
                        jj_scanpos = xsp;
                        if (jj_3_46()) {
                            jj_scanpos = xsp;
                            if (jj_3_47())
                                return true;
                        }
                    }
                }
            }
        }
        if (jj_3R_16())
            return true;
        return false;
    }

    final private boolean jj_3_49() {
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_20())
            return true;
        return false;
    }

    final private boolean jj_3_39() {
        if (jj_scan_token(AND))
            return true;
        if (jj_3R_22())
            return true;
        return false;
    }

    final private boolean jj_3R_22() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_40()) {
            jj_scanpos = xsp;
            if (jj_3_41())
                return true;
        }
        return false;
    }

    final private boolean jj_3_40() {
        if (jj_3R_23())
            return true;
        return false;
    }

    final private boolean jj_3_38() {
        if (jj_scan_token(OR))
            return true;
        if (jj_3R_21())
            return true;
        return false;
    }

    final private boolean jj_3_41() {
        if (jj_scan_token(NOT))
            return true;
        if (jj_3R_23())
            return true;
        return false;
    }

    final private boolean jj_3R_21() {
        if (jj_3R_22())
            return true;
        return false;
    }

    final private boolean jj_3_6() {
        if (jj_scan_token(0))
            return true;
        return false;
    }

    final private boolean jj_3R_20() {
        if (jj_3R_21())
            return true;
        return false;
    }

    final private boolean jj_3_5() {
        if (jj_scan_token(EOL))
            return true;
        return false;
    }

    final private boolean jj_3_19() {
        if (jj_3R_19())
            return true;
        return false;
    }

    final private boolean jj_3_37() {
        if (jj_scan_token(IF))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_20())
            return true;
        return false;
    }

    final private boolean jj_3_17() {
        if (jj_scan_token(EXP))
            return true;
        return false;
    }

    final private boolean jj_3_36() {
        if (jj_scan_token(MIN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_16())
            return true;
        return false;
    }

    final private boolean jj_3_35() {
        if (jj_scan_token(MAX))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_16())
            return true;
        return false;
    }

    final private boolean jj_3_34() {
        if (jj_scan_token(CEIL))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_16())
            return true;
        return false;
    }

    final private boolean jj_3_4() {
        if (jj_scan_token(NAN))
            return true;
        return false;
    }

    final private boolean jj_3_33() {
        if (jj_scan_token(FLOOR))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_16())
            return true;
        return false;
    }

    final private boolean jj_3_16() {
        if (jj_scan_token(DIVIDE))
            return true;
        return false;
    }

    final private boolean jj_3_32() {
        if (jj_scan_token(ACOS))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_16())
            return true;
        return false;
    }

    final private boolean jj_3_31() {
        if (jj_scan_token(ATAN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_16())
            return true;
        return false;
    }

    final private boolean jj_3_30() {
        if (jj_scan_token(ASIN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_16())
            return true;
        return false;
    }

    final private boolean jj_3_29() {
        if (jj_scan_token(TAN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_16())
            return true;
        return false;
    }

    final private boolean jj_3_28() {
        if (jj_scan_token(COS))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_16())
            return true;
        return false;
    }

    final private boolean jj_3_27() {
        if (jj_scan_token(SIN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_16())
            return true;
        return false;
    }

    final private boolean jj_3R_41() {
        if (jj_scan_token(EXP))
            return true;
        if (jj_3R_18())
            return true;
        return false;
    }

    final private boolean jj_3_26() {
        if (jj_scan_token(LN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_16())
            return true;
        return false;
    }

    final private boolean jj_3_25() {
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_16())
            return true;
        if (jj_scan_token(R_BRACKET))
            return true;
        return false;
    }

    final private boolean jj_3_8() {
        if (jj_scan_token(0))
            return true;
        return false;
    }

    final private boolean jj_3_24() {
        if (jj_scan_token(ID))
            return true;
        return false;
    }

    final private boolean jj_3_13() {
        if (jj_scan_token(MINUS))
            return true;
        return false;
    }

    final private boolean jj_3_23() {
        if (jj_scan_token(NUM))
            return true;
        return false;
    }

    final private boolean jj_3_22() {
        if (jj_scan_token(NAN))
            return true;
        return false;
    }

    final private boolean jj_3_21() {
        if (jj_scan_token(NEGINFINITY))
            return true;
        return false;
    }

    final private boolean jj_3_15() {
        if (jj_scan_token(MULTIPLY))
            return true;
        return false;
    }

    final private boolean jj_3R_40() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_18()) {
            jj_scanpos = xsp;
            if (jj_3_19())
                return true;
        }
        return false;
    }

    final private boolean jj_3R_19() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_20()) {
            jj_scanpos = xsp;
            if (jj_3_21()) {
                jj_scanpos = xsp;
                if (jj_3_22()) {
                    jj_scanpos = xsp;
                    if (jj_3_23()) {
                        jj_scanpos = xsp;
                        if (jj_3_24()) {
                            jj_scanpos = xsp;
                            if (jj_3_25()) {
                                jj_scanpos = xsp;
                                if (jj_3_26()) {
                                    jj_scanpos = xsp;
                                    if (jj_3_27()) {
                                        jj_scanpos = xsp;
                                        if (jj_3_28()) {
                                            jj_scanpos = xsp;
                                            if (jj_3_29()) {
                                                jj_scanpos = xsp;
                                                if (jj_3_30()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3_31()) {
                                                        jj_scanpos = xsp;
                                                        if (jj_3_32()) {
                                                            jj_scanpos = xsp;
                                                            if (jj_3_33()) {
                                                                jj_scanpos = xsp;
                                                                if (jj_3_34()) {
                                                                    jj_scanpos = xsp;
                                                                    if (jj_3_35()) {
                                                                        jj_scanpos = xsp;
                                                                        if (jj_3_36()) {
                                                                            jj_scanpos = xsp;
                                                                            if (jj_3_37())
                                                                                return true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    final private boolean jj_3_18() {
        if (jj_scan_token(MINUS))
            return true;
        if (jj_3R_19())
            return true;
        return false;
    }

    final private boolean jj_3_20() {
        if (jj_scan_token(POSINFINITY))
            return true;
        return false;
    }

    final private boolean jj_3_14() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_15()) {
            jj_scanpos = xsp;
            if (jj_3_16())
                return true;
        }
        if (jj_3R_18())
            return true;
        return false;
    }

    final private boolean jj_3_3() {
        if (jj_scan_token(NEGINFINITY))
            return true;
        return false;
    }

    final private boolean jj_3_7() {
        if (jj_scan_token(EOL))
            return true;
        return false;
    }

    final private boolean jj_3_12() {
        if (jj_scan_token(PLUS))
            return true;
        return false;
    }

    final private boolean jj_3R_18() {
        if (jj_3R_40())
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_41()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    final private boolean jj_3_11() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_12()) {
            jj_scanpos = xsp;
            if (jj_3_13())
                return true;
        }
        if (jj_3R_17())
            return true;
        return false;
    }

    final private boolean jj_3R_17() {
        if (jj_3R_18())
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_14()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    final private boolean jj_3_2() {
        if (jj_scan_token(POSINFINITY))
            return true;
        return false;
    }

    final private boolean jj_3R_16() {
        if (jj_3R_17())
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_11()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    final private boolean jj_3_1() {
        if (jj_scan_token(NUM))
            return true;
        return false;
    }

    final private boolean jj_3_9() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_1()) {
            jj_scanpos = xsp;
            if (jj_3_2()) {
                jj_scanpos = xsp;
                if (jj_3_3()) {
                    jj_scanpos = xsp;
                    if (jj_3_4())
                        return true;
                }
            }
        }
        xsp = jj_scanpos;
        if (jj_3_5()) {
            jj_scanpos = xsp;
            if (jj_3_6())
                return true;
        }
        return false;
    }

    final private boolean jj_3_10() {
        if (jj_scan_token(EQUALS))
            return true;
        if (jj_3R_16())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_7()) {
            jj_scanpos = xsp;
            if (jj_3_8())
                return true;
        }
        return false;
    }

    final private boolean jj_3_142() {
        if (jj_scan_token(NEQ))
            return true;
        if (jj_3R_32())
            return true;
        return false;
    }

    final private boolean jj_3_141() {
        if (jj_scan_token(EQ))
            return true;
        if (jj_3R_32())
            return true;
        return false;
    }

    final private boolean jj_3_144() {
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_36())
            return true;
        return false;
    }

    final private boolean jj_3_140() {
        if (jj_scan_token(GTE))
            return true;
        if (jj_3R_32())
            return true;
        return false;
    }

    final private boolean jj_3_139() {
        if (jj_scan_token(LTE))
            return true;
        if (jj_3R_32())
            return true;
        return false;
    }

    final private boolean jj_3_138() {
        if (jj_scan_token(GT))
            return true;
        if (jj_3R_32())
            return true;
        return false;
    }

    final private boolean jj_3_137() {
        if (jj_scan_token(LT))
            return true;
        if (jj_3R_32())
            return true;
        return false;
    }

    final private boolean jj_3R_39() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_143()) {
            jj_scanpos = xsp;
            if (jj_3_144())
                return true;
        }
        return false;
    }

    final private boolean jj_3_134() {
        if (jj_scan_token(AND))
            return true;
        if (jj_3R_38())
            return true;
        return false;
    }

    final private boolean jj_3_143() {
        if (jj_3R_32())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_137()) {
            jj_scanpos = xsp;
            if (jj_3_138()) {
                jj_scanpos = xsp;
                if (jj_3_139()) {
                    jj_scanpos = xsp;
                    if (jj_3_140()) {
                        jj_scanpos = xsp;
                        if (jj_3_141()) {
                            jj_scanpos = xsp;
                            if (jj_3_142())
                                return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    final private boolean jj_3_136() {
        if (jj_scan_token(NOT))
            return true;
        if (jj_3R_39())
            return true;
        return false;
    }

    final private boolean jj_3_133() {
        if (jj_scan_token(OR))
            return true;
        if (jj_3R_37())
            return true;
        return false;
    }

    final private boolean jj_3R_38() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_135()) {
            jj_scanpos = xsp;
            if (jj_3_136())
                return true;
        }
        return false;
    }

    final private boolean jj_3_135() {
        if (jj_3R_39())
            return true;
        return false;
    }

    final private boolean jj_3R_37() {
        if (jj_3R_38())
            return true;
        return false;
    }

    final private boolean jj_3R_36() {
        if (jj_3R_37())
            return true;
        return false;
    }

    final private boolean jj_3_132() {
        if (jj_scan_token(IF))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_36())
            return true;
        return false;
    }

    final private boolean jj_3_131() {
        if (jj_scan_token(MIN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_32())
            return true;
        return false;
    }

    final private boolean jj_3_130() {
        if (jj_scan_token(MAX))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_32())
            return true;
        return false;
    }

    final private boolean jj_3_129() {
        if (jj_scan_token(CEIL))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_32())
            return true;
        return false;
    }

    final private boolean jj_3_128() {
        if (jj_scan_token(FLOOR))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_32())
            return true;
        return false;
    }

    final private boolean jj_3_127() {
        if (jj_scan_token(ACOS))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_32())
            return true;
        return false;
    }

    final private boolean jj_3_126() {
        if (jj_scan_token(ATAN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_32())
            return true;
        return false;
    }

    final private boolean jj_3_125() {
        if (jj_scan_token(ASIN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_32())
            return true;
        return false;
    }

    final private boolean jj_3_124() {
        if (jj_scan_token(TAN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_32())
            return true;
        return false;
    }

    final private boolean jj_3_123() {
        if (jj_scan_token(COS))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_32())
            return true;
        return false;
    }

    final private boolean jj_3_122() {
        if (jj_scan_token(SIN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_32())
            return true;
        return false;
    }

    final private boolean jj_3_121() {
        if (jj_scan_token(LN))
            return true;
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_32())
            return true;
        return false;
    }

    final private boolean jj_3_120() {
        if (jj_scan_token(L_BRACKET))
            return true;
        if (jj_3R_32())
            return true;
        if (jj_scan_token(R_BRACKET))
            return true;
        return false;
    }

    final private boolean jj_3_119() {
        if (jj_scan_token(NUM))
            return true;
        return false;
    }

    final private boolean jj_3_118() {
        if (jj_scan_token(ID))
            return true;
        return false;
    }

    public ParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    public Token token, jj_nt;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    public boolean lookingAhead = false;
    private boolean jj_semLA;
    private int jj_gen;
    final private int[] jj_la1 = new int[0];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static {
        jj_la1_0();
        jj_la1_1();
    }

    private static void jj_la1_0() {
        jj_la1_0 = new int[] {};
    }

    private static void jj_la1_1() {
        jj_la1_1 = new int[] {};
    }

    final private JJCalls[] jj_2_rtns = new JJCalls[144];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    public Parser(java.io.InputStream stream) {
        this(stream, null);
    }

    public Parser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new ParserTokenManager(jj_input_stream);
        token = new Token();
        token.next = jj_nt = token_source.getNextToken();
        jj_gen = 0;
        for (int i = 0; i < 0; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(java.io.InputStream stream) {
        ReInit(stream);
    }

    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        token.next = jj_nt = token_source.getNextToken();
        jj_gen = 0;
        for (int i = 0; i < 0; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    public Parser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new ParserTokenManager(jj_input_stream);
        token = new Token();
        token.next = jj_nt = token_source.getNextToken();
        jj_gen = 0;
        for (int i = 0; i < 0; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        token.next = jj_nt = token_source.getNextToken();
        jj_gen = 0;
        for (int i = 0; i < 0; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    public Parser(ParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        token.next = jj_nt = token_source.getNextToken();
        jj_gen = 0;
        for (int i = 0; i < 0; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(ParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        token.next = jj_nt = token_source.getNextToken();
        jj_gen = 0;
        for (int i = 0; i < 0; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    final private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken = token;
        if ((token = jj_nt).next != null)
            jj_nt = jj_nt.next;
        else
            jj_nt = jj_nt.next = token_source.getNextToken();
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen)
                            c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        jj_nt = token;
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private final class LookaheadSuccess extends java.lang.Error {
    }

    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    final private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source
                        .getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null)
                jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind)
            return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos)
            throw jj_ls;
        return false;
    }

    final public Token getNextToken() {
        if ((token = jj_nt).next != null)
            jj_nt = jj_nt.next;
        else
            jj_nt = jj_nt.next = token_source.getNextToken();
        jj_gen++;
        return token;
    }

    final public Token getToken(int index) {
        Token t = lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++) {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100)
            return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            boolean exists = false;
            for (java.util.Enumeration e = jj_expentries.elements(); e
                    .hasMoreElements();) {
                int[] oldentry = (int[]) (e.nextElement());
                if (oldentry.length == jj_expentry.length) {
                    exists = true;
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            exists = false;
                            break;
                        }
                    }
                    if (exists)
                        break;
                }
            }
            if (!exists)
                jj_expentries.addElement(jj_expentry);
            if (pos != 0)
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    public ParseException generateParseException() {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[44];
        for (int i = 0; i < 44; i++) {
            la1tokens[i] = false;
        }
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 0; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 44; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    final public void enable_tracing() {
    }

    final public void disable_tracing() {
    }

    final private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 144; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                        case 0:
                            jj_3_1();
                            break;
                        case 1:
                            jj_3_2();
                            break;
                        case 2:
                            jj_3_3();
                            break;
                        case 3:
                            jj_3_4();
                            break;
                        case 4:
                            jj_3_5();
                            break;
                        case 5:
                            jj_3_6();
                            break;
                        case 6:
                            jj_3_7();
                            break;
                        case 7:
                            jj_3_8();
                            break;
                        case 8:
                            jj_3_9();
                            break;
                        case 9:
                            jj_3_10();
                            break;
                        case 10:
                            jj_3_11();
                            break;
                        case 11:
                            jj_3_12();
                            break;
                        case 12:
                            jj_3_13();
                            break;
                        case 13:
                            jj_3_14();
                            break;
                        case 14:
                            jj_3_15();
                            break;
                        case 15:
                            jj_3_16();
                            break;
                        case 16:
                            jj_3_17();
                            break;
                        case 17:
                            jj_3_18();
                            break;
                        case 18:
                            jj_3_19();
                            break;
                        case 19:
                            jj_3_20();
                            break;
                        case 20:
                            jj_3_21();
                            break;
                        case 21:
                            jj_3_22();
                            break;
                        case 22:
                            jj_3_23();
                            break;
                        case 23:
                            jj_3_24();
                            break;
                        case 24:
                            jj_3_25();
                            break;
                        case 25:
                            jj_3_26();
                            break;
                        case 26:
                            jj_3_27();
                            break;
                        case 27:
                            jj_3_28();
                            break;
                        case 28:
                            jj_3_29();
                            break;
                        case 29:
                            jj_3_30();
                            break;
                        case 30:
                            jj_3_31();
                            break;
                        case 31:
                            jj_3_32();
                            break;
                        case 32:
                            jj_3_33();
                            break;
                        case 33:
                            jj_3_34();
                            break;
                        case 34:
                            jj_3_35();
                            break;
                        case 35:
                            jj_3_36();
                            break;
                        case 36:
                            jj_3_37();
                            break;
                        case 37:
                            jj_3_38();
                            break;
                        case 38:
                            jj_3_39();
                            break;
                        case 39:
                            jj_3_40();
                            break;
                        case 40:
                            jj_3_41();
                            break;
                        case 41:
                            jj_3_42();
                            break;
                        case 42:
                            jj_3_43();
                            break;
                        case 43:
                            jj_3_44();
                            break;
                        case 44:
                            jj_3_45();
                            break;
                        case 45:
                            jj_3_46();
                            break;
                        case 46:
                            jj_3_47();
                            break;
                        case 47:
                            jj_3_48();
                            break;
                        case 48:
                            jj_3_49();
                            break;
                        case 49:
                            jj_3_50();
                            break;
                        case 50:
                            jj_3_51();
                            break;
                        case 51:
                            jj_3_52();
                            break;
                        case 52:
                            jj_3_53();
                            break;
                        case 53:
                            jj_3_54();
                            break;
                        case 54:
                            jj_3_55();
                            break;
                        case 55:
                            jj_3_56();
                            break;
                        case 56:
                            jj_3_57();
                            break;
                        case 57:
                            jj_3_58();
                            break;
                        case 58:
                            jj_3_59();
                            break;
                        case 59:
                            jj_3_60();
                            break;
                        case 60:
                            jj_3_61();
                            break;
                        case 61:
                            jj_3_62();
                            break;
                        case 62:
                            jj_3_63();
                            break;
                        case 63:
                            jj_3_64();
                            break;
                        case 64:
                            jj_3_65();
                            break;
                        case 65:
                            jj_3_66();
                            break;
                        case 66:
                            jj_3_67();
                            break;
                        case 67:
                            jj_3_68();
                            break;
                        case 68:
                            jj_3_69();
                            break;
                        case 69:
                            jj_3_70();
                            break;
                        case 70:
                            jj_3_71();
                            break;
                        case 71:
                            jj_3_72();
                            break;
                        case 72:
                            jj_3_73();
                            break;
                        case 73:
                            jj_3_74();
                            break;
                        case 74:
                            jj_3_75();
                            break;
                        case 75:
                            jj_3_76();
                            break;
                        case 76:
                            jj_3_77();
                            break;
                        case 77:
                            jj_3_78();
                            break;
                        case 78:
                            jj_3_79();
                            break;
                        case 79:
                            jj_3_80();
                            break;
                        case 80:
                            jj_3_81();
                            break;
                        case 81:
                            jj_3_82();
                            break;
                        case 82:
                            jj_3_83();
                            break;
                        case 83:
                            jj_3_84();
                            break;
                        case 84:
                            jj_3_85();
                            break;
                        case 85:
                            jj_3_86();
                            break;
                        case 86:
                            jj_3_87();
                            break;
                        case 87:
                            jj_3_88();
                            break;
                        case 88:
                            jj_3_89();
                            break;
                        case 89:
                            jj_3_90();
                            break;
                        case 90:
                            jj_3_91();
                            break;
                        case 91:
                            jj_3_92();
                            break;
                        case 92:
                            jj_3_93();
                            break;
                        case 93:
                            jj_3_94();
                            break;
                        case 94:
                            jj_3_95();
                            break;
                        case 95:
                            jj_3_96();
                            break;
                        case 96:
                            jj_3_97();
                            break;
                        case 97:
                            jj_3_98();
                            break;
                        case 98:
                            jj_3_99();
                            break;
                        case 99:
                            jj_3_100();
                            break;
                        case 100:
                            jj_3_101();
                            break;
                        case 101:
                            jj_3_102();
                            break;
                        case 102:
                            jj_3_103();
                            break;
                        case 103:
                            jj_3_104();
                            break;
                        case 104:
                            jj_3_105();
                            break;
                        case 105:
                            jj_3_106();
                            break;
                        case 106:
                            jj_3_107();
                            break;
                        case 107:
                            jj_3_108();
                            break;
                        case 108:
                            jj_3_109();
                            break;
                        case 109:
                            jj_3_110();
                            break;
                        case 110:
                            jj_3_111();
                            break;
                        case 111:
                            jj_3_112();
                            break;
                        case 112:
                            jj_3_113();
                            break;
                        case 113:
                            jj_3_114();
                            break;
                        case 114:
                            jj_3_115();
                            break;
                        case 115:
                            jj_3_116();
                            break;
                        case 116:
                            jj_3_117();
                            break;
                        case 117:
                            jj_3_118();
                            break;
                        case 118:
                            jj_3_119();
                            break;
                        case 119:
                            jj_3_120();
                            break;
                        case 120:
                            jj_3_121();
                            break;
                        case 121:
                            jj_3_122();
                            break;
                        case 122:
                            jj_3_123();
                            break;
                        case 123:
                            jj_3_124();
                            break;
                        case 124:
                            jj_3_125();
                            break;
                        case 125:
                            jj_3_126();
                            break;
                        case 126:
                            jj_3_127();
                            break;
                        case 127:
                            jj_3_128();
                            break;
                        case 128:
                            jj_3_129();
                            break;
                        case 129:
                            jj_3_130();
                            break;
                        case 130:
                            jj_3_131();
                            break;
                        case 131:
                            jj_3_132();
                            break;
                        case 132:
                            jj_3_133();
                            break;
                        case 133:
                            jj_3_134();
                            break;
                        case 134:
                            jj_3_135();
                            break;
                        case 135:
                            jj_3_136();
                            break;
                        case 136:
                            jj_3_137();
                            break;
                        case 137:
                            jj_3_138();
                            break;
                        case 138:
                            jj_3_139();
                            break;
                        case 139:
                            jj_3_140();
                            break;
                        case 140:
                            jj_3_141();
                            break;
                        case 141:
                            jj_3_142();
                            break;
                        case 142:
                            jj_3_143();
                            break;
                        case 143:
                            jj_3_144();
                            break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    final private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
